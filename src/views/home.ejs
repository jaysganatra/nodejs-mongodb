<div class="intro">
<h1>Node.js & MongoDB</h1>
<p>Kindly find the task below.</p>
<strong>Task Description:</strong>
<p>You are tasked with creating a simple web application using Node.js and MongoDB. The application should allow users to manage a collection of books. Each book will have a title, author, and genre. Users should be able to perform the following actions:</p>
<ol>
    <li><strong>Add a Book:</strong>
        <p>Add a new book to the collection.</p>
    </li>
    <li><strong>List Books:</strong>
        <p>Display a list of books in the collection with pagination. Users can specify a page number.</p>
    </li>
    <li><strong>Find Books by Author:</strong>
        <p>Allow users to search for books by a specific author. This API should be optimized for performance, especially when dealing with a large amount of data.</p>
    </li>
    <li><strong>Update Book Information:</strong>
        <p>Update the information of an existing book (title, author, genre).</p>
    </li>
    <li><strong>Delete a Book:</strong>
        <p>Remove a book from the collection.</p>
    </li>
    <li><strong>View Activity Logs:</strong>
        <p>Create a REST API endpoint that allows users to view activity logs. Each log entry should include a timestamp, IP address, action performed, and any relevant book information.</p>
    </li>
</ol>

<strong>Requirements:</strong>
<ol>
    <li>Use Node.js to create the backend server.</li>
    <li>Use MongoDB to store the book collection and activity logs.</li>
    <li>Implement proper error handling for database operations.</li>
    <li>Use REST API standards for designing endpoints and responses.</li>
    <li>Accept requests only from a specific domain (e.g., <code><a href="http://example.com" rel="noopener noreferrer" target="_blank" data-saferedirecturl="https://www.google.com/url?q=http://example.com&amp;source=gmail&amp;ust=1693957390055000&amp;usg=AOvVaw27FIgBSChKuuV6f7EdyqJr">http://example.com</a></code>).</li>
    <li>Implement request rate limiting to allow a maximum of 10 requests per second from the same IP address.</li>
    <li>Store activity logs in a MongoDB collection named "activity_logs". Each log entry should include fields for timestamp, IP address, action performed, and relevant book information.</li>
    <li>Use Prettier and ESLint with default configurations for code formatting and project structure.</li>
    <li>Write clear and concise code with comments where necessary.</li>
    <li>Include a README file with instructions on how to run the application locally.</li>
</ol>
<strong>Bonus (Optional):</strong>
<p>Implement basic front-end views using a templating engine or a front-end framework of your choice.</p>
</div>

